var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","course","coursescontroller","enrollment","enrollmentscontroller","login","instructor","instructorscontroller","semester","semesterscontroller","student","studentscontroller","classroom","classroomscontroller","user","usersession","usersessionscontroller","validatelogincontroller","add_days_off()","address_is_valid?()","calculate_meetings()","can_be_deleted?()","can_be_deleted?()","can_create_course?()","class_how_full?()","class_max_is_valid?()","class_min_is_valid?()","classroom_is_valid?()","course_id_is_valid?()","coursefee()","create()","create()","create()","create()","create()","create()","create()","dates_in_span_valid?()","days_of_week_are_valid?()","delete_date()","delete_date()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","dismissal_is_valid?()","dismissal_to_s()","edit()","edit()","edit()","edit()","email_is_valid?()","end_date_is_valid?()","end_time_is_valid?()","enrolled_to_s()","enrollment_is_valid?()","fee_for_additional_materials_is_valid?()","fee_per_meeting_is_valid?()","first_name_is_valid?()","first_name_is_valid?()","formatted_number()","full_name_first_last()","full_name_last_first()","grade_is_valid?()","grade_is_valid?()","grand_total()","import()","import()","index()","index()","index()","index()","index()","last_name_is_valid?()","last_name_is_valid?()","modify_name_for_enrollments()","name_is_valid?()","name_is_valid?()","name_is_valid?()","new()","new()","new()","new()","new()","new()","number_of_classes_is_valid?()","parent_email_is_valid?()","parent_phone2_is_valid?()","parent_phone_is_valid?()","phone_is_valid?()","instructor_is_valid()","instructor_is_valid?()","registration_date_is_valid?()","scholarship_amount_is_valid?()","scholarship_is_valid?()","semester_id_is_valid?()","show()","specific_days_in_semester()","start_date_as_date()","start_date_is_valid?()","start_time_is_valid?()","student_id_is_valid?()","student_not_already_enrolled?()","classroom_is_valid?()","total_fee_is_valid?()","update()","update()","update()","update()","update()","readme_for_app"],"longSearchIndex":["applicationcontroller","applicationhelper","course","coursescontroller","enrollment","enrollmentscontroller","login","instructor","instructorscontroller","semester","semesterscontroller","student","studentscontroller","classroom","classroomscontroller","user","usersession","usersessionscontroller","validatelogincontroller","semesterscontroller#add_days_off()","instructor#address_is_valid?()","coursescontroller#calculate_meetings()","instructor#can_be_deleted?()","classroom#can_be_deleted?()","semester#can_create_course?()","course#class_how_full?()","course#class_max_is_valid?()","course#class_min_is_valid?()","classroom#classroom_is_valid?()","enrollment#course_id_is_valid?()","coursescontroller#coursefee()","coursescontroller#create()","enrollmentscontroller#create()","instructorscontroller#create()","semesterscontroller#create()","studentscontroller#create()","classroomscontroller#create()","usersessionscontroller#create()","semester#dates_in_span_valid?()","course#days_of_week_are_valid?()","semester#delete_date()","semesterscontroller#delete_date()","coursescontroller#destroy()","enrollmentscontroller#destroy()","instructorscontroller#destroy()","semesterscontroller#destroy()","studentscontroller#destroy()","classroomscontroller#destroy()","usersessionscontroller#destroy()","enrollment#dismissal_is_valid?()","enrollment#dismissal_to_s()","coursescontroller#edit()","instructorscontroller#edit()","studentscontroller#edit()","classroomscontroller#edit()","instructor#email_is_valid?()","semester#end_date_is_valid?()","course#end_time_is_valid?()","enrollment#enrolled_to_s()","enrollment#enrollment_is_valid?()","course#fee_for_additional_materials_is_valid?()","course#fee_per_meeting_is_valid?()","instructor#first_name_is_valid?()","student#first_name_is_valid?()","instructor#formatted_number()","instructor#full_name_first_last()","instructor#full_name_last_first()","student#grade_is_valid?()","classroom#grade_is_valid?()","student#grand_total()","semester#import()","semesterscontroller#import()","coursescontroller#index()","instructorscontroller#index()","semesterscontroller#index()","studentscontroller#index()","classroomscontroller#index()","instructor#last_name_is_valid?()","student#last_name_is_valid?()","course#modify_name_for_enrollments()","course#name_is_valid?()","semester#name_is_valid?()","classroom#name_is_valid?()","coursescontroller#new()","instructorscontroller#new()","semesterscontroller#new()","studentscontroller#new()","classroomscontroller#new()","usersessionscontroller#new()","course#number_of_classes_is_valid?()","student#parent_email_is_valid?()","student#parent_phone2_is_valid?()","student#parent_phone_is_valid?()","instructor#phone_is_valid?()","instructorscontroller#instructor_is_valid()","course#instructor_is_valid?()","semester#registration_date_is_valid?()","enrollment#scholarship_amount_is_valid?()","enrollment#scholarship_is_valid?()","enrollment#semester_id_is_valid?()","semesterscontroller#show()","semester#specific_days_in_semester()","semester#start_date_as_date()","semester#start_date_is_valid?()","course#start_time_is_valid?()","enrollment#student_id_is_valid?()","enrollment#student_not_already_enrolled?()","course#classroom_is_valid?()","course#total_fee_is_valid?()","coursescontroller#update()","instructorscontroller#update()","semesterscontroller#update()","studentscontroller#update()","classroomscontroller#update()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Course","","Course.html","","<p>PTA Course held within a specific Semester. PTA Instructors and Students\nbelong to a Course.\n"],["CoursesController","","CoursesController.html","",""],["Enrollment","","Enrollment.html","",""],["EnrollmentsController","","EnrollmentsController.html","",""],["Login","","Login.html","",""],["Instructor","","Instructor.html","",""],["InstructorsController","","InstructorsController.html","",""],["Semester","","Semester.html","",""],["SemestersController","","SemestersController.html","",""],["Student","","Student.html","",""],["StudentsController","","StudentsController.html","",""],["Classroom","","Classroom.html","",""],["ClassroomsController","","ClassroomsController.html","",""],["User","","User.html","",""],["UserSession","","UserSession.html","",""],["UserSessionsController","","UserSessionsController.html","",""],["ValidateLoginController","","ValidateLoginController.html","","<p>This a shim controller that is used to automatically filter out any user\nthat is not logged in on any …\n"],["add_days_off","SemestersController","SemestersController.html#method-i-add_days_off","(update_hash)",""],["address_is_valid?","Instructor","Instructor.html#method-i-address_is_valid-3F","()","<p>Tests that instructor&#39;s address is not nil, string, and at least 1\ncharacter. Returns true or …\n"],["calculate_meetings","CoursesController","CoursesController.html#method-i-calculate_meetings","()","<p>Returns the number of times a class meets in a semester. Called from\njavascript, with a hash of the days …\n"],["can_be_deleted?","Instructor","Instructor.html#method-i-can_be_deleted-3F","()","<p>Tests that instructor is not linked to any courses in the semester and\nreturns true or false.\n"],["can_be_deleted?","Classroom","Classroom.html#method-i-can_be_deleted-3F","()","<p>Tests that classroom is not linked to any course or student so it can be\ndeleted\n"],["can_create_course?","Semester","Semester.html#method-i-can_create_course-3F","()","<p>Tests that instructor and classroom exist before creating course and\nreturns true or false\n"],["class_how_full?","Course","Course.html#method-i-class_how_full-3F","()","<p>Returns array with number of students in course and class_max.\n"],["class_max_is_valid?","Course","Course.html#method-i-class_max_is_valid-3F","()","<p>Tests that class_max is not nil or that the class_min has not been set. It\nchecks that the class_max …\n"],["class_min_is_valid?","Course","Course.html#method-i-class_min_is_valid-3F","()","<p>Tests that class_min is not nil or that the class_max has not been set. It\nchecks that the class_min …\n"],["classroom_is_valid?","Classroom","Classroom.html#method-i-classroom_is_valid-3F","()","<p>Verifies that the classroom is valid by checking that is not nil, string,\nand is at least 1 character …\n"],["course_id_is_valid?","Enrollment","Enrollment.html#method-i-course_id_is_valid-3F","()","<p>Tests that course for enrollment&#39;s course_id exists and returns true or\nfalse.\n"],["coursefee","CoursesController","CoursesController.html#method-i-coursefee","()","<p>Returns the fee of the course\n"],["create","CoursesController","CoursesController.html#method-i-create","()",""],["create","EnrollmentsController","EnrollmentsController.html#method-i-create","()","<p>def show\n\n<pre>#not used\n@semester = Semester.find_by_id params[:semester_id]\nreturn unless semester_is_valid(@semester) ...</pre>\n"],["create","InstructorsController","InstructorsController.html#method-i-create","()",""],["create","SemestersController","SemestersController.html#method-i-create","()",""],["create","StudentsController","StudentsController.html#method-i-create","()",""],["create","ClassroomsController","ClassroomsController.html#method-i-create","()",""],["create","UserSessionsController","UserSessionsController.html#method-i-create","()",""],["dates_in_span_valid?","Semester","Semester.html#method-i-dates_in_span_valid-3F","(date_string)","<p>Verifies the date range can be parsed (works for single date and range of\nthe form date-date, also adds …\n"],["days_of_week_are_valid?","Course","Course.html#method-i-days_of_week_are_valid-3F","()","<p>Tests that none of the days for course are nil and that the days&#39;s\nvalues are either true or false …\n"],["delete_date","Semester","Semester.html#method-i-delete_date","(date)","<p>Removes date from holiday array and become school day\n"],["delete_date","SemestersController","SemestersController.html#method-i-delete_date","()",""],["destroy","CoursesController","CoursesController.html#method-i-destroy","()",""],["destroy","EnrollmentsController","EnrollmentsController.html#method-i-destroy","()","<p>def edit\n\n<pre>@semester = Semester.find_by_id params[:semester_id]\nreturn unless semester_is_valid(@semester) ...</pre>\n"],["destroy","InstructorsController","InstructorsController.html#method-i-destroy","()",""],["destroy","SemestersController","SemestersController.html#method-i-destroy","()",""],["destroy","StudentsController","StudentsController.html#method-i-destroy","()",""],["destroy","ClassroomsController","ClassroomsController.html#method-i-destroy","()",""],["destroy","UserSessionsController","UserSessionsController.html#method-i-destroy","()",""],["dismissal_is_valid?","Enrollment","Enrollment.html#method-i-dismissal_is_valid-3F","()","<p>Tests that enrollment&#39;s dismissal is not nil and is between 0 and 3.\nReturns true or false\n"],["dismissal_to_s","Enrollment","Enrollment.html#method-i-dismissal_to_s","()","<p>Returns the corresponding value in the DISMISSAL array based on\nenrollment&#39;s dismissal value\n"],["edit","CoursesController","CoursesController.html#method-i-edit","()",""],["edit","InstructorsController","InstructorsController.html#method-i-edit","()",""],["edit","StudentsController","StudentsController.html#method-i-edit","()",""],["edit","ClassroomsController","ClassroomsController.html#method-i-edit","()",""],["email_is_valid?","Instructor","Instructor.html#method-i-email_is_valid-3F","()","<p>Tests that instructor&#39;s email is not nil, string, and meets certain\ncriteria. Returns true or …\n"],["end_date_is_valid?","Semester","Semester.html#method-i-end_date_is_valid-3F","()","<p>Verifies that the end date can be parsed and returns true or false\n"],["end_time_is_valid?","Course","Course.html#method-i-end_time_is_valid-3F","()","<p>Tests if end_time of course is not nil and a string and returns true or\nfalse\n"],["enrolled_to_s","Enrollment","Enrollment.html#method-i-enrolled_to_s","()","<p>Return status of if enrolled or not\n"],["enrollment_is_valid?","Enrollment","Enrollment.html#method-i-enrollment_is_valid-3F","()","<p>Tests that enrolled value was initialized and non-nil. Returns true or\nfalse\n"],["fee_for_additional_materials_is_valid?","Course","Course.html#method-i-fee_for_additional_materials_is_valid-3F","()","<p>Tests that fee_for_additional_material for course is not nil and greater\nthan or equal to 0 and returns …\n"],["fee_per_meeting_is_valid?","Course","Course.html#method-i-fee_per_meeting_is_valid-3F","()","<p>Tests that the fee_per_meeting for course is not nil and greater than or\nequal to 0 and returns true …\n"],["first_name_is_valid?","Instructor","Instructor.html#method-i-first_name_is_valid-3F","()","<p>Tests that the instructor&#39;s first_name is not nil, a string, and at\nleast 1 character. Return …\n"],["first_name_is_valid?","Student","Student.html#method-i-first_name_is_valid-3F","()","<p>Tests that student&#39;s first_name is not nil, a string, and is at least 1\ncharacter\n"],["formatted_number","Instructor","Instructor.html#method-i-formatted_number","(number)","<p>Formats number properly\n"],["full_name_first_last","Instructor","Instructor.html#method-i-full_name_first_last","()","<p>Returns first_name, last_name or just first_name if no last_name exists\n"],["full_name_last_first","Instructor","Instructor.html#method-i-full_name_last_first","()","<p>Returns last_name, first_name or just first_name if no last_name exists\n"],["grade_is_valid?","Student","Student.html#method-i-grade_is_valid-3F","()","<p>Tests that student&#39;s grade is between K-5 and capitalizes k\n"],["grade_is_valid?","Classroom","Classroom.html#method-i-grade_is_valid-3F","()","<p>Verifies that the grade is valid by checking if grade is part of K-5\n"],["grand_total","Student","Student.html#method-i-grand_total","()",""],["import","Semester","Semester.html#method-i-import","(semester_to_import)","<p>Transfers instructors, students, and courses from one semester to\nanother semester\n"],["import","SemestersController","SemestersController.html#method-i-import","()",""],["index","CoursesController","CoursesController.html#method-i-index","()",""],["index","InstructorsController","InstructorsController.html#method-i-index","()",""],["index","SemestersController","SemestersController.html#method-i-index","()",""],["index","StudentsController","StudentsController.html#method-i-index","()",""],["index","ClassroomsController","ClassroomsController.html#method-i-index","()",""],["last_name_is_valid?","Instructor","Instructor.html#method-i-last_name_is_valid-3F","()","<p>Tests that the instructor&#39;s last_name is not nil, a string, and at\nleast 1 character. Return true …\n"],["last_name_is_valid?","Student","Student.html#method-i-last_name_is_valid-3F","()","<p>Tests that student&#39;s last_name is not nil, a string, and is at least 1\ncharacter\n"],["modify_name_for_enrollments","Course","Course.html#method-i-modify_name_for_enrollments","(student_id)",""],["name_is_valid?","Course","Course.html#method-i-name_is_valid-3F","()","<p>Tests if the name of course is not nil and is a string and returns true or\nfalse.\n"],["name_is_valid?","Semester","Semester.html#method-i-name_is_valid-3F","()","<p>Verifies that the name is valid by checking name is not nil, is a\nstring,and at least 1 character. Returns …\n"],["name_is_valid?","Classroom","Classroom.html#method-i-name_is_valid-3F","()","<p>Verifies that the name is valid by checking name is not nil, string, and at\nleast 1 character\n"],["new","CoursesController","CoursesController.html#method-i-new","()",""],["new","InstructorsController","InstructorsController.html#method-i-new","()",""],["new","SemestersController","SemestersController.html#method-i-new","()",""],["new","StudentsController","StudentsController.html#method-i-new","()",""],["new","ClassroomsController","ClassroomsController.html#method-i-new","()",""],["new","UserSessionsController","UserSessionsController.html#method-i-new","()",""],["number_of_classes_is_valid?","Course","Course.html#method-i-number_of_classes_is_valid-3F","()","<p>Tests if number_of_classes for course is not nil and is greater than 0 and\nreturns true or false.\n"],["parent_email_is_valid?","Student","Student.html#method-i-parent_email_is_valid-3F","()","<p>Tests that student&#39;s parent_email is not nil, a string, and has proper\nformating\n"],["parent_phone2_is_valid?","Student","Student.html#method-i-parent_phone2_is_valid-3F","()","<p>Tests that student&#39;s parent_phone is either empty or has proper phone\nformatting\n"],["parent_phone_is_valid?","Student","Student.html#method-i-parent_phone_is_valid-3F","()","<p>Tests that student&#39;s parent_phone is either empty or has proper phone\nformatting\n"],["phone_is_valid?","Instructor","Instructor.html#method-i-phone_is_valid-3F","()","<p>Tests that instructor&#39;s phone is not nil and is a string. It also\nchecks that it has proper formatting …\n"],["instructor_is_valid","InstructorsController","InstructorsController.html#method-i-instructor_is_valid","(user)",""],["instructor_is_valid?","Course","Course.html#method-i-instructor_is_valid-3F","()","<p>Tests that the course&#39;s instructor_id is not nil and returns true or\nfalse.\n"],["registration_date_is_valid?","Semester","Semester.html#method-i-registration_date_is_valid-3F","()","<p>Verifies that the registration date can be parsed and returns true or false\n"],["scholarship_amount_is_valid?","Enrollment","Enrollment.html#method-i-scholarship_amount_is_valid-3F","()","<p>Tests that enrollment&#39;s scholarship_amount is not nil, that there\nexists a course for this enrollment …\n"],["scholarship_is_valid?","Enrollment","Enrollment.html#method-i-scholarship_is_valid-3F","()","<p>Tests that enrollment&#39;s scholarship is not nil and that is it between 0\nand 2. Returns true or false …\n"],["semester_id_is_valid?","Enrollment","Enrollment.html#method-i-semester_id_is_valid-3F","()","<p>Tests that semester for the enrollment&#39;s semester_id exists and returns\ntrue or false.\n"],["show","SemestersController","SemestersController.html#method-i-show","()",""],["specific_days_in_semester","Semester","Semester.html#method-i-specific_days_in_semester","()","<p>returns a hash 0f 1-7 (where 1 is monday) of the quantity of that day\n"],["start_date_as_date","Semester","Semester.html#method-i-start_date_as_date","()","<p>Returns start_date as date object\n"],["start_date_is_valid?","Semester","Semester.html#method-i-start_date_is_valid-3F","()","<p>Verifies that the start date can be parsed and returns true or false\n"],["start_time_is_valid?","Course","Course.html#method-i-start_time_is_valid-3F","()","<p>Tests if start_time of course is not nil and a string and returns true or\nfalse.\n"],["student_id_is_valid?","Enrollment","Enrollment.html#method-i-student_id_is_valid-3F","()","<p>Tests that enrollment&#39;s student exists and returns true or false.\n"],["student_not_already_enrolled?","Enrollment","Enrollment.html#method-i-student_not_already_enrolled-3F","()","<p>Tests that student is not already linked to a course in enrollment and\nreturns true or false.\n"],["classroom_is_valid?","Course","Course.html#method-i-classroom_is_valid-3F","()","<p>Tests that the course&#39;s classroom_id is not nil and returns true or\nfalse.\n"],["total_fee_is_valid?","Course","Course.html#method-i-total_fee_is_valid-3F","()","<p>Tests that course&#39;s total_fee is not nil and is greater than or equal\nto 0 and returns true or false. …\n"],["update","CoursesController","CoursesController.html#method-i-update","()",""],["update","InstructorsController","InstructorsController.html#method-i-update","()",""],["update","SemestersController","SemestersController.html#method-i-update","()",""],["update","StudentsController","StudentsController.html#method-i-update","()",""],["update","ClassroomsController","ClassroomsController.html#method-i-update","()",""],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>README\n"]]}}